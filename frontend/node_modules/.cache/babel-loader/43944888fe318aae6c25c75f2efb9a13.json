{"ast":null,"code":"// import React, { useReducer } from 'react';\n// import playerContext from './PlayerContext';\n// import playerReducer from './Reducer';\n// import { songsArr, artistsArr, genreArr, albumArr} from './tables';\n// import {\n//   SET_CURRENT_SONG,\n//   TOGGLE_RANDOM,\n//   TOGGLE_REPEAT,\n//   TOGGLE_PLAYING,\n//   SET_SONGS,\n//   SET_TEMP_SONGS,\n//   SET_ARTIST,\n//   SET_ALBUM\n// } from './Types'\n// const PlayerState = props => {\n//   const initialState = {\n//     currentSong: 0,\n//     songs: songsArr,\n//     tempSongs: songsArr,\n//     // songs: [],\n//     albums: albumArr,\n//     songsSidebar:songsArr,\n//     artists: artistsArr,\n//     genres: genreArr,\n//     repeat: false,\n//     random: false,\n//     playing: false,\n//     audio: null\n//   }\n//   const [state, dispatch] = useReducer(playerReducer, initialState);\n//   // Set playing state\n//   const togglePlaying = () => dispatch({ type: TOGGLE_PLAYING, data: state.playing ? false : true })\n//   const setPlayingFalse = () => dispatch({type:TOGGLE_PLAYING, data: false})\n//   // Set current song\n//   const SetCurrent = id => dispatch({ type: SET_CURRENT_SONG, data: id })\n//   const setSongs = (newSongs) => dispatch({ type: SET_SONGS, data: newSongs })\n//   const setArtist = (newArtist) => dispatch({ type: SET_ARTIST, data: newArtist })\n//   const setAlbum = (newAlbum) => dispatch({ type: SET_ALBUM, data: newAlbum })\n//   const setTempSongs = (newTempSongs) => dispatch({ type: SET_TEMP_SONGS, data: newTempSongs })\n//   // Prev song\n//   const prevSong = () => {\n//     if (state.currentSong === 0) {\n//       SetCurrent(state.songs.length - 1)\n//     } else {\n//       SetCurrent(state.currentSong - 1)\n//     }\n//   }\n//   // Next song\n//   const nextSong = () => {\n//     if (state.currentSong === state.songs.length - 1) {\n//       SetCurrent(0)\n//     } else {\n//       SetCurrent(state.currentSong + 1)\n//     }\n//   }\n//   // Repeat and Random\n//   const toggleRepeat = (id) => dispatch({ type: TOGGLE_REPEAT, data: state.repeat ? false : true })\n//   const toggleRandom = (id) => dispatch({ type: TOGGLE_RANDOM, data: state.random ? false : true })\n//   // End of Song\n//   const handleEnd = () => {\n//     // Check for random and repeat options\n//     if (state.random) {\n//       return dispatch({ type: SET_CURRENT_SONG, data: ~~(Math.random() * state.songs.length) })\n//     } else {\n//       if (state.repeat) {\n//         nextSong()\n//       } else if ((state.currentSong === state.songs.length - 1)) {\n//         return\n//       } else {\n//         nextSong();\n//       }\n//     }\n//   }\n//   return <playerContext.Provider\n//     value={{\n//       currentSong: state.currentSong,\n//       songs: state.songs,\n//       tempSongs: state.tempSongs,\n//       albums: state.albums,\n//       artists: state.artists,\n//       genres: state.genres,\n//       repeat: state.repeat,\n//       random: state.random,\n//       playing: state.playing,\n//       audio: state.audio,\n//       nextSong,\n//       prevSong,\n//       SetCurrent,\n//       toggleRandom,\n//       toggleRepeat,\n//       togglePlaying,\n//       handleEnd,\n//       setSongs,\n//       setArtist,\n//       setTempSongs,\n//       setPlayingFalse,\n//       setAlbum\n//     }}>\n//     {props.children}\n//   </playerContext.Provider>\n// }\n// export default PlayerState;","map":null,"metadata":{},"sourceType":"module"}