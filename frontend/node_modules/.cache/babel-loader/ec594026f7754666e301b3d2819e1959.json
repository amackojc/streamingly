{"ast":null,"code":"import _slicedToArray from\"/home/oskaragh/stremingly/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useReducer}from'react';import playerContext from'./PlayerContext';import playerReducer from'./Reducer';import{songsArr,artistsArr,genreArr,albumArr}from'./tables';import{SET_CURRENT_SONG,// TOGGLE_RANDOM,\n// TOGGLE_REPEAT,\nTOGGLE_PLAYING,SET_SONGS,SET_TEMP_SONGS// SET_ARTIST,\n// SET_ALBUM\n}from'./Types';import{jsx as _jsx}from\"react/jsx-runtime\";var PlayerState=function PlayerState(props){var initialState={currentSong:0,songs:songsArr,tempSongs:songsArr,// songs: [],\n// albums: albumArr,\n// songsSidebar:songsArr,\n// artists: artistsArr,\n// genres: genreArr,\n// repeat: false,\n// random: false,\nplaying:false,audio:null};var _useReducer=useReducer(playerReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// Set playing state\nvar togglePlaying=function togglePlaying(){return dispatch({type:TOGGLE_PLAYING,data:state.playing?false:true});};var setPlayingFalse=function setPlayingFalse(){return dispatch({type:TOGGLE_PLAYING,data:false});};// Set current song\nvar SetCurrent=function SetCurrent(id){return dispatch({type:SET_CURRENT_SONG,data:id});};var setSongs=function setSongs(newSongs){return dispatch({type:SET_SONGS,data:newSongs});};// const setArtist = (newArtist) => dispatch({ type: SET_ARTIST, data: newArtist })\n// const setAlbum = (newAlbum) => dispatch({ type: SET_ALBUM, data: newAlbum })\nvar setTempSongs=function setTempSongs(newTempSongs){return dispatch({type:SET_TEMP_SONGS,data:newTempSongs});};// // Prev song\n// const prevSong = () => {\n//   if (state.currentSong === 0) {\n//     SetCurrent(state.songs.length - 1)\n//   } else {\n//     SetCurrent(state.currentSong - 1)\n//   }\n// }\n// // Next song\n// const nextSong = () => {\n//   if (state.currentSong === state.songs.length - 1) {\n//     SetCurrent(0)\n//   } else {\n//     SetCurrent(state.currentSong + 1)\n//   }\n// }\n// Repeat and Random\n// const toggleRepeat = (id) => dispatch({ type: TOGGLE_REPEAT, data: state.repeat ? false : true })\n// const toggleRandom = (id) => dispatch({ type: TOGGLE_RANDOM, data: state.random ? false : true })\n// End of Song\n// const handleEnd = () => {\n//   // Check for random and repeat options\n//   if (state.random) {\n//     return dispatch({ type: SET_CURRENT_SONG, data: ~~(Math.random() * state.songs.length) })\n//   } else {\n//     if (state.repeat) {\n//       nextSong()\n//     } else if ((state.currentSong === state.songs.length - 1)) {\n//       return\n//     } else {\n//       nextSong();\n//     }\n//   }\n// }\nreturn/*#__PURE__*/_jsx(playerContext.Provider,{value:{currentSong:state.currentSong,songs:state.songs,tempSongs:state.tempSongs,// albums: state.albums,\n// artists: state.artists,\n// genres: state.genres,\n// repeat: state.repeat,\n// random: state.random,\nplaying:state.playing,audio:state.audio,// nextSong,\n// prevSong,\nSetCurrent:SetCurrent,// toggleRandom,\n// toggleRepeat,\ntogglePlaying:togglePlaying,// handleEnd,\nsetSongs:setSongs,// setArtist,\nsetTempSongs:setTempSongs,setPlayingFalse:setPlayingFalse// setAlbum\n},children:props.children});};export default PlayerState;","map":null,"metadata":{},"sourceType":"module"}