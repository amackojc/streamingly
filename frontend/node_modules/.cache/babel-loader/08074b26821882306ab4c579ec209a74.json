{"ast":null,"code":"import _slicedToArray from\"/home/oskaragh/stremingly/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useReducer}from'react';import playerContext from'./PlayerContext';import playerReducer from'./Reducer';import{songsArr,artistsArr,genreArr,albumArr}from'./tables';import{SET_CURRENT_SONG,// TOGGLE_RANDOM,\n// TOGGLE_REPEAT,\nTOGGLE_PLAYING,SET_SONGS,SET_TEMP_SONGS// SET_ARTIST,\n// SET_ALBUM\n}from'./Types';import{jsx as _jsx}from\"react/jsx-runtime\";var PlayerState=function PlayerState(props){var initialState={currentSong:0,songs:songsArr,tempSongs:songsArr,// songs: [],\nalbums:albumArr,songsSidebar:songsArr,artists:artistsArr,genres:genreArr,repeat:false,random:false,playing:false,audio:null};var _useReducer=useReducer(playerReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// Set playing state\nvar togglePlaying=function togglePlaying(){return dispatch({type:TOGGLE_PLAYING,data:state.playing?false:true});};var setPlayingFalse=function setPlayingFalse(){return dispatch({type:TOGGLE_PLAYING,data:false});};// Set current song\nvar SetCurrent=function SetCurrent(id){return dispatch({type:SET_CURRENT_SONG,data:id});};// const setSongs = (newSongs) => dispatch({ type: SET_SONGS, data: newSongs })\n// const setArtist = (newArtist) => dispatch({ type: SET_ARTIST, data: newArtist })\n// const setAlbum = (newAlbum) => dispatch({ type: SET_ALBUM, data: newAlbum })\nvar setTempSongs=function setTempSongs(newTempSongs){return dispatch({type:SET_TEMP_SONGS,data:newTempSongs});};// Prev song\nvar prevSong=function prevSong(){if(state.currentSong===0){SetCurrent(state.songs.length-1);}else{SetCurrent(state.currentSong-1);}};// Next song\nvar nextSong=function nextSong(){if(state.currentSong===state.songs.length-1){SetCurrent(0);}else{SetCurrent(state.currentSong+1);}};// Repeat and Random\n// const toggleRepeat = (id) => dispatch({ type: TOGGLE_REPEAT, data: state.repeat ? false : true })\n// const toggleRandom = (id) => dispatch({ type: TOGGLE_RANDOM, data: state.random ? false : true })\n// End of Song\nvar handleEnd=function handleEnd(){// Check for random and repeat options\nif(state.random){return dispatch({type:SET_CURRENT_SONG,data:~~(Math.random()*state.songs.length)});}else{if(state.repeat){nextSong();}else if(state.currentSong===state.songs.length-1){return;}else{nextSong();}}};return/*#__PURE__*/_jsx(playerContext.Provider,{value:{currentSong:state.currentSong,songs:state.songs,tempSongs:state.tempSongs,albums:state.albums,artists:state.artists,genres:state.genres,repeat:state.repeat,random:state.random,playing:state.playing,audio:state.audio,nextSong:nextSong,prevSong:prevSong,SetCurrent:SetCurrent,// toggleRandom,\n// toggleRepeat,\ntogglePlaying:togglePlaying,handleEnd:handleEnd,// setSongs,\n// setArtist,\nsetTempSongs:setTempSongs,setPlayingFalse:setPlayingFalse// setAlbum\n},children:props.children});};export default PlayerState;","map":null,"metadata":{},"sourceType":"module"}